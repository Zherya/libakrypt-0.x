/* ----------------------------------------------------------------------------------------------- */
/*                                                                                                 */
/*  Файл ak_esp.h                                                                                  */
/*  - содержит предварительное описание функций по работе с контекстом протокола ESP.              */
/* ----------------------------------------------------------------------------------------------- */
#ifndef LIBAKRYPT_AK_ESP_H
#define LIBAKRYPT_AK_ESP_H

/* ----------------------------------------------------------------------------------------------- */
#include <ak_hmac.h>
#include <ak_mgm.h>

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Структура, описывающая текущее состояние заголовка ESP-пакета */
struct esp_header {
    /*! \brief Значение идентификатора защищенного соединения */
    ak_uint32 SPI;
    /*! \brief Порядковый номер пакета */
    ak_uint32 SeqNum;
};

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Структура, описывающая текущее состояние вектора инициализации (синхропосылки) ESP-пакета */
struct esp_iv {
    /*! \brief Счетчик ключа первого уровня ESP_TREE */
    ak_uint8 i1;
    /*! \brief Счетчик ключа второго уровня ESP_TREE */
    unsigned short i2;
    /*! \brief Счетчик ключа третьего уровня ESP_TREE */
    unsigned short i3;
    /*! \brief Порядковый номер (в сетевом порядке байт) сообщения, зашифрованного на текущем ключе */
    ak_uint8 pnum[3];
};

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Перечисление, содержащее идентификаторы возможных для использования
    в протоколе ESP российских криптографических AEAD-алгоритмов */
typedef enum {
    undefined_transform,
    encr_kuznyechik_mgm_ktree,
    encr_magma_mgm_ktree,
    encr_kuznyechik_mgm_mac_ktree,
    encr_magma_mgm_mac_ktree
} transform_t;

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Перечисление, описывающее возможное направление ESP-трафика */
typedef enum {
    out_packet,
    in_packet
} packet_direct_t;

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Структура, описывающая "скользящее окно" номеров последовательностей принятых пакетов */
struct esp_seqnum_window {
    /*! \brief Окно обработанных номеров последовательностей, зависящих от правой границы
     * (правая граница window[size - 1] всегда обработана, если был обработан хоть
     * один пакет) */
    bool_t *window;
    /*! \brief Размер окна */
    size_t size;
    /*! \brief Правая граница окна обработанных номеров последовательностей,
     * отображающая самый большой из обработанных номеров*/
    ak_uint32 right_bound;
};
/* ----------------------------------------------------------------------------------------------- */
/*! \brief Структура, описывающая контекст транспортного протокола ESP */
typedef struct esp {
    /*! \brief ESP-заголовок */
    struct esp_header header;
    /*! \brief Состояние синхропосылки для исходяших пакетов */
    struct esp_iv out_iv;
    /*! \brief Состояние синхропосылки для входящих пакетов */
    struct esp_iv in_iv;
    /*! \brief Используемый трансформ (криптографический алгоритм) */
    transform_t transform;
    /*! \brief Контекст ключа шифрования сообщений
     * (можно использовать один контекст для обоих направлений трафика,
     * так как все равно ключ устанавливается заново при отправке
     * каждого пакета) */
     struct bckey msg_key;
    /*! \brief Корневой ключ (32 байта) исходящего трафика,
     * используемый для диверсификации ключа шифрования/имитозащиты */
    ak_uint8 out_root_key[32];
    /*! \brief Корневой ключ (32 байта) входящего трафика,
     * используемый для диверсификации ключа шифрования/имитозащиты */
    ak_uint8 in_root_key[32];
    /*! \brief Секретная соль исходящего трафика (длина зависит от трансформа) */
    struct buffer out_salt;
    /*! \brief Секретная соль входящего трафика (длина зависит от трансформа) */
    struct buffer in_salt;
    /*! \brief "Скользящее окно" номеров последовательностей принятых пакетов */
    struct esp_seqnum_window seqnum_window;
} *ak_esp;

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Функция инициализации контекста протокола ESP. */
int ak_esp_context_create( ak_esp );
/*! \brief Функция уничтожения (очистки) контекста протокола ESP. */
int ak_esp_context_destroy( ak_esp );

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Функция устанавливает новый трансформ контекста ESP, при этом обнуляются все параметры
 * и данные (если имеются) контекста, в том числе и ключи шифрования и секретная соль. */
int ak_esp_context_set_transform( ak_esp , transform_t );
/*! \brief Получение идентификатора текущего используемого трансформа
 * (криптографического алгоритма). */
transform_t ak_esp_context_get_transform( ak_esp );
/*! \brief Функция меняет текущий трансформ на симметричный (с шифрованием/без шифрования),
 * оставляя неизменным используемый блочный алгоритм ("Магма" или "Кузнечик") и все параметры
 * и ключевые данные контекста протокола ESP. */
int ak_esp_context_switch_transform( ak_esp );

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Функция устанавливает значение SPI (Security Parameter Index) заголовка ESP
 * в контекст протокола ESP. */
int ak_esp_context_set_spi( ak_esp , ak_uint32 );
/*! \brief Функция устанавливает корневой ключ для заданного направления трафика
 * в контекст протокола ESP. */
int ak_esp_context_set_root_key( ak_esp , ak_pointer const , const size_t , packet_direct_t );
/*! \brief Функция устанавливает секретную соль для заданного направления трафика
 * в контекст протокола ESP. */
int ak_esp_context_set_salt( ak_esp , ak_pointer const , const size_t , packet_direct_t );
/*! \brief Функция устанавливает размер "скользящего окна" контекста протокола ESP. */
int ak_esp_context_set_seqnum_window_size( ak_esp , size_t );

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Основная функция, формирующая ESP-пакет на основе параметров контекста протокола ESP
 * и прикладных данных. Сформированный пакет записывается в указанную область памяти. */
size_t ak_esp_context_write_packet( ak_esp , ak_pointer , const size_t , ak_uint8 , ak_uint8 *);
/*! \brief Основная функция чтения (расшифрования и проверки) ESP-пакета
 * и получения прикладных данных пакета */
size_t ak_esp_context_read_packet( ak_esp , ak_uint8 * , size_t , ak_uint8 * );

#endif
/* ----------------------------------------------------------------------------------------------- */
/*                                                                                        ak_esp.h */
/* ----------------------------------------------------------------------------------------------- */
